---
title: "BEE 4750/5750 Homework 0"
author: "Steven Wu (skw74)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    output = x^2
    return output
end

```


## Problem 1.2
We can see that $5^2 =$ `j square_number(5)`.

## Problem 1.3
```julia
import Pkg
Pkg.add("Plots")
v = square_number
using Plots
plot(v,-10,10,ylabel="x^2",xlabel="x")

```

# Problem 2


## Problem 2.1
When $a$ is larger than the real $\sqrt{x}$, $x/a$ always ends up smaller than $\sqrt{x}$. This is true vice-versa
as well. Thus, $\sqrt{x}$ has to be between the two.

## Problem 2.2
```julia
e = 10^-3
function square_root(x)
    a = x/2 #initial guess
    while abs(a-(x/a)) > e
      b = x/a
      a = (b+a)/2
    end
    return a
end
square_root(2)
```

# Problem 3

## Problem 3.1
` j r = rand(20)`

## Problem 3.2
```julia
function mean(x)
  #x must be a vector
  sum = 0
  for i in x
    sum = sum + i
  end
  return sum/length(x)
end

function demean(x)
  c = copy(x)
  return c - ones(length(x))*mean(x)
end
```

## Problem 3.3
```julia
f = zeros(10)
for i in 1:length(f)
  if i>2 && i<9
    f[i]=1
  end
end
```
## Problem 3.4
```julia
newmatrix = rand(5,5)
numcolumns = size(newmatrix)[2]
for i = 1:numcolumns
  newmatrix[:,i] -= ones(numcolumns)*mean(newmatrix[:,i])
end
```

# Problem 4

## Problem 4.1
```julia
# load the Pkg package manager
import Pkg
# activate the project environment. The "." references the current working directory. This can be changed to any particular path.
Pkg.activate(".")
# instantiate the project environment. This installs any needed packages.
Pkg.instantiate()
Pkg.add("Distributions")
# load Distributions.jl
using Distributions

logmean = log(0.03)
sd = .005
log_normal_dist= LogNormal(logmean,sd)
yt = rand(log_normal_dist,100)
```

## Problem 4.2
```julia
function Phosphorus(a,yt,b,q,T,X0)
  X = zeros(T)
  X[1]=X0
  t=1
  while t != T
    X[t+1] = X[t] + a + yt[t] + Xt^q/(1+Xt^q) -b*Xt
    t += 1
  end
  return X
end
```


## Problem 4.3
```julia
X0 = 5
a = 0.4
q = 2
b = 0.42
result = Phosphorus(a,yt,b,q,100,X0)
Plot(result,0,100,xlabel="time",ylabel="Phosphorus concentration")

```

# References